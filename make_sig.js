const sha1 = require('./sha1.js');

function xor(hex1, hex2) {
    const buf1 = Buffer.from(hex1, 'hex');
    const buf2 = Buffer.from(hex2, 'hex');
    let number = -1
    const bufResult = buf1.map((b, i) => {
        if (number != buf2.length - 1) {
            number = number + 1
        } else {
            number = 0
        }
        return b ^ buf2[number]
    });
    return bufResult;
}

module.exports = function make_sig (body_data, ver){
    var body_text = body_data
    if(typeof body_data == "string"){
        body_text = Buffer.from(body_data)
    }
    var salt;
    if(ver == "GL"){
        salt = Buffer.from([
            0xC1, 0x05, 0x27, 0x91, 0xF9, 0x85, 0x2A, 0xD8, 0x7A, 0x57, 0x1D, 0xF2, 0xF2, 0xE6, 0x22, 0xCB,
            0x9C, 0xD6, 0x9E, 0x32, 0x0E, 0x8D, 0x3F, 0x13, 0x73, 0xA7, 0xCE, 0xFB, 0x77, 0x6D, 0x9A, 0x11,
            0x42, 0x9A, 0x5A, 0xCD, 0x72, 0x3A, 0x00, 0x4E, 0x1F, 0x95, 0x9A, 0x20, 0x5D, 0xA5, 0xC0, 0x26,
            0x02, 0x55, 0x49, 0xDC, 0x5F, 0x9A, 0xF4, 0xAE, 0xA5, 0x90, 0x3E, 0x7C, 0xD0, 0xA1, 0xF4, 0x5E,
        ])
    } else {
        salt = Buffer.from([
            0xad, 0x79, 0x6f, 0x89, 0xd8, 0xee, 0x9e, 0x39, 0x45, 0x7a, 0xe3, 0x4d, 0x78, 0xbe, 0xd3, 0xee, 
            0xf4, 0xff, 0x89, 0xe9, 0x39, 0x49, 0xe8, 0x99, 0x94, 0x9a, 0x9b, 0xae, 0xbe, 0xef, 0xe4, 0xdb, 
            0x34, 0x94, 0x5a, 0x6c, 0x43, 0x34, 0xf4, 0x6d, 0xc3, 0x23, 0x34, 0x95, 0x54, 0x2a, 0xeb, 0x54, 
            0x9b, 0xe3, 0x49, 0x51, 0x1b, 0x9b, 0x9b, 0xb3, 0xd1, 0x6b, 0x57, 0x4e, 0xe8, 0x92, 0x35, 0xf0
        ])
    }
    // xor salt
    const salted1 = xor(salt,[0x36])
    body_text = Buffer.concat([salted1,body_text])
    var hash1 = Buffer.from(sha1(body_text),"hex");
    //second part
    const salted2 = xor(salt,[0x5C])
    body_text = Buffer.concat([salted2,hash1])
    var hash2 = Buffer.from(sha1(body_text),"hex");
    return hash2.toString('base64')
}
